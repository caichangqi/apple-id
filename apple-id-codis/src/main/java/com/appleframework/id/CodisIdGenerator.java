package com.appleframework.id;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

import org.apache.log4j.Logger;

import com.appleframework.id.codis.CodisResourcePool;

import redis.clients.jedis.Jedis;


/**
 * This id generator utilizes Redis (http://redis.io/) to generate serial IDs.
 * 
 * <p>
 * Persistency: IDs generated by this id-generator are persistent (assuming the
 * Redis backend runs in persistent mode).
 * </p>
 * 
 * @author Thanh Nguyen <btnguyen2k@gmail.com>
 * @since 0.1.0
 */
public class CodisIdGenerator extends SerialIdGenerator implements IdentityGenerator {

	private static Logger logger = Logger.getLogger(CodisIdGenerator.class);  

	private CodisResourcePool codisResourcePool;
	
    public static CodisIdGenerator getInstance(String zkAddr, String zkProxyDir) {
        return getInstance(zkAddr, zkProxyDir, 30000);
    }

    /**
     * Helper method to obtain {@link CodisIdGenerator}.
     * 
     * @param redisHost
     * @param redisPort
     * @param redisUser
     * @param redisPassword
     * @param redisPoolConfig
     * @return
     */
    public static CodisIdGenerator getInstance(final String zkAddr, final String zkProxyDir, final int zkSessionTimeoutMs) {
        StringBuilder key = new StringBuilder();
        key.append(zkAddr).append("|").append(zkProxyDir);
        try {
            CodisIdGenerator idGen = (CodisIdGenerator) idGenerators.get(key.toString(),
                    new Callable<SerialIdGenerator>() {
                        @Override
                        public SerialIdGenerator call() throws Exception {
                            CodisIdGenerator idGen = new CodisIdGenerator();
                            CodisResourcePool codisResourcePool = new CodisResourcePool();
                            codisResourcePool.setZkAddr(zkAddr);
                            codisResourcePool.setZkProxyDir(zkProxyDir);
                            codisResourcePool.setZkSessionTimeoutMs(zkSessionTimeoutMs);
                            idGen.setCodisResourcePool(codisResourcePool);
                            return idGen;
                        }
                    });
            return idGen;
        } catch (ExecutionException e) {
            logger.warn(e.getMessage(), e);
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodisIdGenerator init() {
		Version.logVersion();
        super.init();
        codisResourcePool.init();
        return this;
    }

    public void destroy() {
        try {
        	codisResourcePool.destroy();
        } catch (Exception e) {
            logger.warn(e.getMessage(), e);
        }
        super.destroy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nextId(final String namespace) {
    	try (Jedis jedis = codisResourcePool.getResource()) {
    		return jedis.incr(namespace);
    	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long currentId(final String namespace) {
    	try (Jedis jedis = codisResourcePool.getResource()) {
    		return Long.parseLong(jedis.get(namespace));
    	}
    }

    /**
     * {@inheritDoc}
     * 
     * @since 0.4.0
     */
    @Override
    public boolean setValue(final String namespace, final long value) {
    	try (Jedis jedis = codisResourcePool.getResource()) {
    		jedis.incrBy(namespace, value);
    	}
    	return true;
    }

	public void setCodisResourcePool(CodisResourcePool codisResourcePool) {
		this.codisResourcePool = codisResourcePool;
	}
    
}